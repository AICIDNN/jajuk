<?xml version="1.0" standalone="yes"?>

<templates>
<template kind="1" name="Type.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>ExampleType</example>
    <text>/**
## type: class|interface|enum
 * DOCUMENT_ME
 */</text>
</template>
<template kind="2" name="Field.serialVersionUID" default="false" signature="false">
    <regex>serialVersionUID</regex>
    <example>serialVersionUID</example>
    <text>/** Generated serialVersionUID */</text>
</template>
<template kind="2" name="Field.fPrefix" default="false" signature="false">
    <regex>f([A-Z].+)</regex>
    <example>fExampleMember</example>
    <text>/**
 * The DOCUMENT_ME
 */</text>
</template>
<template kind="2" name="Field.thePrefix" default="false" signature="false">
    <regex>the[A-Z].+</regex>
    <example>theNumberOfQuestions</example>
    <text>/**
 * ${e.rsfu()}.  DOCUMENT_ME
 */</text>
</template>
<template kind="2" name="Field.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>numberOfQuestions</example>
    <text>/**
#if(${e.isStatic()} &amp;&amp; ${e.isFinal()})
 * The Constant ${e}.  DOCUMENT_ME
#else
 * DOCUMENT_ME
#end
 */</text>
</template>
<template kind="3" name="Method.getInstance" default="false" signature="false">
    <regex>getInstance</regex>
    <example>getInstance</example>
    <text>/**
 * Gets the single instance of ${e.getDeclaringType()}.
 * 
 * @return single instance of ${e.getDeclaringType()}
 */</text>
</template>
<template kind="3" name="Method.Getter" default="false" signature="true">
    <regex>\S+ get(\S+)\(.*\)</regex>
    <example>int getNumberOfQuestions()</example>
    <text>/**
 * Gets the ${e.g(1).rsfl()}.
 * 
 * @return the ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.Setter" default="false" signature="true">
    <regex>void set(\S+)\([^,]+ ([^,]+)\)</regex>
    <example>void setNumberOfQuestions(int number)</example>
    <text>/**
 * Sets the ${e.g(1).rsfl()}.
 * 
 * @param ${e.g(2)} the new ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.boolean Getter" default="false" signature="true">
    <regex>boolean is(.+)\(.*\)</regex>
    <example>boolean isBlue()</example>
    <text>/**
 * Checks if is ${e.g(1).rsfl()}.
 * 
 * @return true, if is ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.Main-Method" default="false" signature="true">
    <regex>void main\(String\[\] (\S+)\)</regex>
    <example>void main(String[] args)</example>
    <text>/**
 * The main method.
 * 
 * @param ${e.g(1)} the arguments
 */</text>
</template>
<template kind="3" name="Method.Constructor" default="false" signature="true">
    <regex>(\S+)\(.*\)</regex>
    <example>SimpleClass()</example>
    <text>/**
 * Instantiates a new ${e.g(1).rsfl()}.
 */</text>
</template>
<template kind="3" name="Method.Returns void" default="false" signature="true">
    <regex>void (.+)\(.*\)</regex>
    <example>void doSomething()</example>
    <text>/**
 * ${e.g(1).rsfu()}.  
 * DOCUMENT_ME
 */</text>
</template>
<template kind="3" name="Method.Returns boolean" default="false" signature="true">
    <regex>boolean (\S+)\(.*\)</regex>
    <example>boolean doSomething(int parameter)</example>
    <text>/**
 * ${e.g(1).rsfu()}.
 * DOCUMENT_ME
 * 
 * @return true if... */</text>
</template>
<template kind="3" name="Method.Returns other" default="false" signature="true">
    <regex>(\S+) (\S+)\(.*\)</regex>
    <example>ReturnValue calculateSomething()</example>
    <text>/**
 * ${e.g(2).rsfu()}.
 * DOCUMENT_ME
 * 
 * @return the ${e.g(1).rsfl()}  
 */</text>
</template>
<template kind="3" name="Method.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>doSomething</example>
    <text>/**
## Actually this is not used, because there
## are templates for different return types
 * ${e.rsfu()}.  DOCUMENT_ME
 */</text>
</template>
<template kind="4" name="Parameter.compUnit" default="false" signature="false">
    <regex>compUnit</regex>
    <example>compUnit</example>
    <text>/**
## Example for shortcuts
 * @param ${e} DOCUMENT_ME
 */</text>
</template>
<template kind="4" name="Parameter.pPrefix" default="false" signature="false">
    <regex>p([A-Z].+)</regex>
    <example>pField</example>
    <text>/**
 * @param ${e} DOCUMENT_ME
 */</text>
</template>
<template kind="4" name="Parameter.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>simpleParameter</example>
    <text>/**
 * @param ${e} DOCUMENT_ME
 */</text>
</template>
<template kind="5" name="Exception.IOException" default="false" signature="false">
    <regex>IOException</regex>
    <example>IOException</example>
    <text>/**
 * @throws ${e} Signals that an I/O exception has occurred.
 */</text>
</template>
<template kind="5" name="Exception.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>ExampleException</example>
    <text>/**
 * @throws the ${e.sfl()}
 */</text>
</template>
</templates>

